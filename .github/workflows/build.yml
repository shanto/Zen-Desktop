name: Zen Release builds

on:
  workflow_dispatch:
    inputs:
      create_release:
        description: 'Create a new release for this build'
        required: false
        default: false
        type: 'boolean'
      update_version:
        description: 'Update the version number'
        required: false
        default: false
        type: 'boolean'
      update_branch:
        description: 'Update branch with new version'
        required: true
        default: 'alpha'
        type: 'choice'
        options:
          - 'alpha'
          - 'twilight'
  workflow_call:
    inputs:
      create_release:
        description: 'Create a new release for this build'
        required: false
        default: false
        type: 'boolean'
      update_version:
        description: 'Update the version number'
        required: false
        default: false
        type: 'boolean'
      update_branch:
        description: 'Update branch with new version'
        required: true
        default: 'alpha'
        type: 'string'
        
jobs:
  build-data:
    permissions:
      contents: write
    name: Generate build data
    runs-on: ubuntu-latest
    outputs:
      build_date: ${{ steps.data.outputs.builddate }}
      version: ${{ steps.data.outputs.version }}
    steps:
      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20

      - uses: actions/checkout@v4
        with:
          submodules: recursive
          token: ${{ secrets.DEPLOY_KEY }}

      - name: Install pnpm
        run: npm install -g pnpm

      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - name: Install dependencies
        run: pnpm install

      - name: Setup Surfer
        run: |
          npm i -g @zen-browser/surfer

      - name: Bump version
        if: ${{ github.event.inputs.update_version == 'true' && github.event.inputs.update_branch == 'alpha' }}
        run: |
          pnpm surfer ci --brand ${{ github.event.inputs.update_branch }} --bump prerelease

      - name: Bump version without new version
        if: ${{ github.event.inputs.update_version == 'false' || github.event.inputs.update_branch == 'twilight' }}
        run: |
          pnpm surfer ci --brand ${{ github.event.inputs.update_branch }}

      - name: Debug
        run: |
          surfer get version
          surfer get version | xargs
          echo "$(surfer get version | xargs)"

      - name: Export release date
        id: data
        shell: bash
        run: |
          echo "builddate=$(date +"%Y-%m-%d")" >> $GITHUB_OUTPUT
          echo "version=$(surfer get version | xargs)" >> $GITHUB_OUTPUT

      - uses: stefanzweifel/git-auto-commit-action@v4
        if: ${{ github.event.inputs.update_version == 'true' }}
        with:
          commit_message: ðŸ”– Update version to ${{ steps.data.outputs.version }}
          commit_user_name: Zen Browser Robot
          commit_user_email: zen-browser-bot@users.noreply.github.com

  check-release:
    runs-on: ubuntu-latest
    needs: [build-data]
    steps:
      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20

      - uses: actions/checkout@v4
        with:
          submodules: recursive
          token: ${{ secrets.DEPLOY_KEY }}

      - name: Install pnpm
        run: npm install -g pnpm

      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - name: Install dependencies
        run: pnpm install

      - name: Setup surfer
        run: |
          npm i -g @zen-browser/surfer

      - name: Activate surfer CLI
        run: |
          echo "There's a bug in the surfer CLI, we run this so that surfer sets everything up correctly"
          pnpm surfer ci --brand ${{ github.event.inputs.update_branch }} --display-version ${{ needs.build-data.outputs.version }}

      - name: Check version
        run: |
          echo "$(pwd)"
          ls .
          echo "version=$(pnpm surfer get version | xargs)" >> $GITHUB_OUTPUT
          if [[ $(pnpm surfer get version | xargs) == ${{ needs.build-data.outputs.version }} ]]; then
            echo ">>> Version matches"
          else
            echo ">>> Version mismatch"
            exit 1
          fi

  source:
    permissions:
      contents: write
    runs-on: ubuntu-latest
    needs: [build-data, check-release]
    environment: production
    steps:
      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20

      - uses: actions/checkout@v4
        with:
          submodules: recursive
          token: ${{ secrets.DEPLOY_KEY }}

      - name: Setup git
        run: |
          git config --global user.email "mauro-balades@users.noreply.github.com"
          git config --global user.name "mauro-balades"

      - name: Install pnpm
        run: npm install -g pnpm

      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - name: Install dependencies
        run: pnpm install

      - name: Load surfer CI setup
        run: pnpm surfer ci --brand ${{ github.event.inputs.update_branch }} --display-version ${{ needs.build-data.outputs.version }}

      - name: Download firefox source and dependancies
        run: pnpm surfer download --verbose

      - name: Import
        run: pnpm surfer import --verbose

      - name: Compress
        run: |
          cd engine
          # -h is used to dereference symlinks
          tar --use-compress-program=zstd -hcf ../zen.source.tar.gz *
          cd ..

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: zen.source.tar.gz
          path: ./zen.source.tar.gz

  windows-step-1:
    name: Windows build step 1 (PGO build)
    uses: ./.github/workflows/windows-release-build.yml
    needs: [build-data]
    permissions:
      contents: write
    secrets: inherit
    with:
      build-version: ${{ needs.build-data.outputs.version }}
      generate-gpo: true
      profile-data-path-archive: zen-windows-x86_64-profile-data-and-jarlog.zip
      release-branch: ${{ github.event.inputs.update_branch }}

  windows-step-2:
    name: Windows build step 2 (Generate profile data)
    uses: ./.github/workflows/windows-profile-build.yml
    permissions:
      contents: write
    secrets: inherit
    needs: [windows-step-1, build-data]
    with:
      build-version: ${{ needs.build-data.outputs.version }}
      profile-data-path-archive: zen.win64-pgo-stage-1.zip
      release-branch: ${{ github.event.inputs.update_branch }}

  windows-step-3:
    name: Windows build step 3 (build with profile data)
    uses: ./.github/workflows/windows-release-build.yml
    permissions:
      contents: write
    secrets: inherit
    needs: [build-data, windows-step-2]
    with:
      build-version: ${{ needs.build-data.outputs.version }}
      generate-gpo: false
      release-branch: ${{ github.event.inputs.update_branch }}

  release:
    if: ${{ github.event.inputs.create_release == 'true' }}
    permissions: write-all
    name: Release
    needs: [build-data, windows-step-3, check-release, source]
    runs-on: ubuntu-latest
    environment:
      name: ${{ github.event.inputs.update_branch == 'alpha' && 'Deploy-Release' || 'Deploy-Twilight' }}

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
          token: ${{ secrets.DEPLOY_KEY }}

      - name: Git Pull
        run: |
          git pull

      - uses: actions/download-artifact@v4

      - name: List
        run: find .

      - name: Clone updates repo
        uses: actions/checkout@v4
        with:
          repository: zen-browser/updates-server
          path: updates-server
          token: ${{ secrets.DEPLOY_KEY }}

      - name: Copy update manifests
        env:
          RELEASE_BRANCH: ${{ github.event.inputs.update_branch }}
        run: |
          cd updates-server
          mkdir -p updates

          if [[ $RELEASE_BRANCH == 'alpha' ]]; then
            cp -a ../.github/workflows/object/windows-x64-signed-generic/update_manifest/.  updates/
            cp -a ../.github/workflows/object/windows-x64-signed-specific/update_manifest/.  updates/
          else
            cp -a ../windows_update_manifest_generic/.  updates/
            cp -a ../windows_update_manifest_specific/.  updates/
          fi

      - uses: stefanzweifel/git-auto-commit-action@v4
        with:
          commit_message: ðŸš€ Update update manifests
          commit_user_name: Zen Browser Robot
          commit_user_email: zen-browser-bot@users.noreply.github.com
          repository: ./updates-server

        # If we are on twilight, we want to just update the twilight tag's release
      - name: Update twilight tag
        if: ${{ github.event.inputs.update_branch == 'twilight' }}
        uses: softprops/action-gh-release@v2
        with:
          files: |
            zen.source.tar.gz
            zen.win-generic.zip
            zen.win-specific.zip
            windows-generic.mar
            windows.mar
            zen.installer.exe
            zen.installer-generic.exe
          tag_name: "twilight"
          name: "Twilight build - ${{ needs.build-data.outputs.version }} (${{ needs.build-data.outputs.build_date }})"
          body: |
            # Zen Twilight Build

            This is the latest build from the twilight branch. It is updated more recently than the alpha branch.

            * This build is not recommended for daily use, it may contain bugs, issues, and other problems.
          draft: false
          prerelease: true
          token: ${{ github.token }}
        env:
          GITHUB_REPOSITORY: ${{ github.repository }}

      - name: release-github
        uses: 'marvinpinto/action-automatic-releases@latest'
        if: ${{ github.event.inputs.update_branch == 'alpha' }}
        with:
          repo_token: '${{ secrets.DEPLOY_KEY }}'
          automatic_release_tag: ${{ needs.build-data.outputs.version }}
          prerelease: false
          title: 'Alpha build - ${{ needs.build-data.outputs.version }} (${{ needs.build-data.outputs.build_date }})'
          files: |
            zen.source.tar.gz
            .github/workflows/object/windows-x64-signed-generic/zen.win-generic.zip
            .github/workflows/object/windows-x64-signed-specific/zen.win-specific.zip
            .github/workflows/object/windows-x64-signed-generic/windows-generic.mar
            .github/workflows/object/windows-x64-signed-specific/windows.mar
            .github/workflows/object/windows-x64-signed-specific/zen.installer.exe
            .github/workflows/object/windows-x64-signed-generic/zen.installer-generic.exe
